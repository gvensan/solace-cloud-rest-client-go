/*
MISSION CONTROL

Documentation for Mission Control API

API version: V2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Broker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Broker{}

// Broker Broker Details available on expand only.
type Broker struct {
	// The version number for the event broker service.
	Version *string `json:"version,omitempty"`
	// Version Family, a truncated form of the version.
	VersionFamily *string `json:"versionFamily,omitempty"`
	// The service package identifier of the event broker version.
	ServicePackageId *string `json:"servicePackageId,omitempty"`
	// The maximum message spool usage allowed on the event broker service, in gigabytes (GB).
	MaxSpoolUsage *int32 `json:"maxSpoolUsage,omitempty"`
	// The disk size for the message spool, in gigabytes (GB).
	DiskSize *int32 `json:"diskSize,omitempty"`
	// Whether redundancy group SSL is enabled. This is mate-link encryption.
	RedundancyGroupSslEnabled *bool `json:"redundancyGroupSslEnabled,omitempty"`
	// Whether Config-Sync SSL is enabled.
	ConfigSyncSslEnabled *bool `json:"configSyncSslEnabled,omitempty"`
	// The monitoring mode. This can be 'basic' or 'advanced'. The value of basic is default monitoring and advanced means that monitoring of the event broker is enabled.
	MonitoringMode *string `json:"monitoringMode,omitempty"`
	// The list of client certificate authorities.
	ClientCertificateAuthorities []CertificateAuthority `json:"clientCertificateAuthorities,omitempty"`
	// The list of domain certificate authorities.
	DomainCertificateAuthorities []CertificateAuthority `json:"domainCertificateAuthorities,omitempty"`
	// Whether TLS Standard Domain Certificate Authorities is enabled.
	TlsStandardDomainCertificateAuthoritiesEnabled *bool `json:"tlsStandardDomainCertificateAuthoritiesEnabled,omitempty"`
	// The LDAP profiles configured for the event broker service.
	LdapProfiles []LdapProfile `json:"ldapProfiles,omitempty"`
	Cluster *Cluster `json:"cluster,omitempty"`
	ManagementReadOnlyLoginCredential *ManagementLoginCredential `json:"managementReadOnlyLoginCredential,omitempty"`
	// The list of Message VPNs configured on the event broker service.
	MsgVpns []MsgVpn `json:"msgVpns,omitempty"`
}

// NewBroker instantiates a new Broker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroker() *Broker {
	this := Broker{}
	return &this
}

// NewBrokerWithDefaults instantiates a new Broker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerWithDefaults() *Broker {
	this := Broker{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Broker) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Broker) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Broker) SetVersion(v string) {
	o.Version = &v
}

// GetVersionFamily returns the VersionFamily field value if set, zero value otherwise.
func (o *Broker) GetVersionFamily() string {
	if o == nil || IsNil(o.VersionFamily) {
		var ret string
		return ret
	}
	return *o.VersionFamily
}

// GetVersionFamilyOk returns a tuple with the VersionFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetVersionFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.VersionFamily) {
		return nil, false
	}
	return o.VersionFamily, true
}

// HasVersionFamily returns a boolean if a field has been set.
func (o *Broker) HasVersionFamily() bool {
	if o != nil && !IsNil(o.VersionFamily) {
		return true
	}

	return false
}

// SetVersionFamily gets a reference to the given string and assigns it to the VersionFamily field.
func (o *Broker) SetVersionFamily(v string) {
	o.VersionFamily = &v
}

// GetServicePackageId returns the ServicePackageId field value if set, zero value otherwise.
func (o *Broker) GetServicePackageId() string {
	if o == nil || IsNil(o.ServicePackageId) {
		var ret string
		return ret
	}
	return *o.ServicePackageId
}

// GetServicePackageIdOk returns a tuple with the ServicePackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetServicePackageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePackageId) {
		return nil, false
	}
	return o.ServicePackageId, true
}

// HasServicePackageId returns a boolean if a field has been set.
func (o *Broker) HasServicePackageId() bool {
	if o != nil && !IsNil(o.ServicePackageId) {
		return true
	}

	return false
}

// SetServicePackageId gets a reference to the given string and assigns it to the ServicePackageId field.
func (o *Broker) SetServicePackageId(v string) {
	o.ServicePackageId = &v
}

// GetMaxSpoolUsage returns the MaxSpoolUsage field value if set, zero value otherwise.
func (o *Broker) GetMaxSpoolUsage() int32 {
	if o == nil || IsNil(o.MaxSpoolUsage) {
		var ret int32
		return ret
	}
	return *o.MaxSpoolUsage
}

// GetMaxSpoolUsageOk returns a tuple with the MaxSpoolUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetMaxSpoolUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSpoolUsage) {
		return nil, false
	}
	return o.MaxSpoolUsage, true
}

// HasMaxSpoolUsage returns a boolean if a field has been set.
func (o *Broker) HasMaxSpoolUsage() bool {
	if o != nil && !IsNil(o.MaxSpoolUsage) {
		return true
	}

	return false
}

// SetMaxSpoolUsage gets a reference to the given int32 and assigns it to the MaxSpoolUsage field.
func (o *Broker) SetMaxSpoolUsage(v int32) {
	o.MaxSpoolUsage = &v
}

// GetDiskSize returns the DiskSize field value if set, zero value otherwise.
func (o *Broker) GetDiskSize() int32 {
	if o == nil || IsNil(o.DiskSize) {
		var ret int32
		return ret
	}
	return *o.DiskSize
}

// GetDiskSizeOk returns a tuple with the DiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskSize) {
		return nil, false
	}
	return o.DiskSize, true
}

// HasDiskSize returns a boolean if a field has been set.
func (o *Broker) HasDiskSize() bool {
	if o != nil && !IsNil(o.DiskSize) {
		return true
	}

	return false
}

// SetDiskSize gets a reference to the given int32 and assigns it to the DiskSize field.
func (o *Broker) SetDiskSize(v int32) {
	o.DiskSize = &v
}

// GetRedundancyGroupSslEnabled returns the RedundancyGroupSslEnabled field value if set, zero value otherwise.
func (o *Broker) GetRedundancyGroupSslEnabled() bool {
	if o == nil || IsNil(o.RedundancyGroupSslEnabled) {
		var ret bool
		return ret
	}
	return *o.RedundancyGroupSslEnabled
}

// GetRedundancyGroupSslEnabledOk returns a tuple with the RedundancyGroupSslEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetRedundancyGroupSslEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RedundancyGroupSslEnabled) {
		return nil, false
	}
	return o.RedundancyGroupSslEnabled, true
}

// HasRedundancyGroupSslEnabled returns a boolean if a field has been set.
func (o *Broker) HasRedundancyGroupSslEnabled() bool {
	if o != nil && !IsNil(o.RedundancyGroupSslEnabled) {
		return true
	}

	return false
}

// SetRedundancyGroupSslEnabled gets a reference to the given bool and assigns it to the RedundancyGroupSslEnabled field.
func (o *Broker) SetRedundancyGroupSslEnabled(v bool) {
	o.RedundancyGroupSslEnabled = &v
}

// GetConfigSyncSslEnabled returns the ConfigSyncSslEnabled field value if set, zero value otherwise.
func (o *Broker) GetConfigSyncSslEnabled() bool {
	if o == nil || IsNil(o.ConfigSyncSslEnabled) {
		var ret bool
		return ret
	}
	return *o.ConfigSyncSslEnabled
}

// GetConfigSyncSslEnabledOk returns a tuple with the ConfigSyncSslEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetConfigSyncSslEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ConfigSyncSslEnabled) {
		return nil, false
	}
	return o.ConfigSyncSslEnabled, true
}

// HasConfigSyncSslEnabled returns a boolean if a field has been set.
func (o *Broker) HasConfigSyncSslEnabled() bool {
	if o != nil && !IsNil(o.ConfigSyncSslEnabled) {
		return true
	}

	return false
}

// SetConfigSyncSslEnabled gets a reference to the given bool and assigns it to the ConfigSyncSslEnabled field.
func (o *Broker) SetConfigSyncSslEnabled(v bool) {
	o.ConfigSyncSslEnabled = &v
}

// GetMonitoringMode returns the MonitoringMode field value if set, zero value otherwise.
func (o *Broker) GetMonitoringMode() string {
	if o == nil || IsNil(o.MonitoringMode) {
		var ret string
		return ret
	}
	return *o.MonitoringMode
}

// GetMonitoringModeOk returns a tuple with the MonitoringMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetMonitoringModeOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringMode) {
		return nil, false
	}
	return o.MonitoringMode, true
}

// HasMonitoringMode returns a boolean if a field has been set.
func (o *Broker) HasMonitoringMode() bool {
	if o != nil && !IsNil(o.MonitoringMode) {
		return true
	}

	return false
}

// SetMonitoringMode gets a reference to the given string and assigns it to the MonitoringMode field.
func (o *Broker) SetMonitoringMode(v string) {
	o.MonitoringMode = &v
}

// GetClientCertificateAuthorities returns the ClientCertificateAuthorities field value if set, zero value otherwise.
func (o *Broker) GetClientCertificateAuthorities() []CertificateAuthority {
	if o == nil || IsNil(o.ClientCertificateAuthorities) {
		var ret []CertificateAuthority
		return ret
	}
	return o.ClientCertificateAuthorities
}

// GetClientCertificateAuthoritiesOk returns a tuple with the ClientCertificateAuthorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetClientCertificateAuthoritiesOk() ([]CertificateAuthority, bool) {
	if o == nil || IsNil(o.ClientCertificateAuthorities) {
		return nil, false
	}
	return o.ClientCertificateAuthorities, true
}

// HasClientCertificateAuthorities returns a boolean if a field has been set.
func (o *Broker) HasClientCertificateAuthorities() bool {
	if o != nil && !IsNil(o.ClientCertificateAuthorities) {
		return true
	}

	return false
}

// SetClientCertificateAuthorities gets a reference to the given []CertificateAuthority and assigns it to the ClientCertificateAuthorities field.
func (o *Broker) SetClientCertificateAuthorities(v []CertificateAuthority) {
	o.ClientCertificateAuthorities = v
}

// GetDomainCertificateAuthorities returns the DomainCertificateAuthorities field value if set, zero value otherwise.
func (o *Broker) GetDomainCertificateAuthorities() []CertificateAuthority {
	if o == nil || IsNil(o.DomainCertificateAuthorities) {
		var ret []CertificateAuthority
		return ret
	}
	return o.DomainCertificateAuthorities
}

// GetDomainCertificateAuthoritiesOk returns a tuple with the DomainCertificateAuthorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetDomainCertificateAuthoritiesOk() ([]CertificateAuthority, bool) {
	if o == nil || IsNil(o.DomainCertificateAuthorities) {
		return nil, false
	}
	return o.DomainCertificateAuthorities, true
}

// HasDomainCertificateAuthorities returns a boolean if a field has been set.
func (o *Broker) HasDomainCertificateAuthorities() bool {
	if o != nil && !IsNil(o.DomainCertificateAuthorities) {
		return true
	}

	return false
}

// SetDomainCertificateAuthorities gets a reference to the given []CertificateAuthority and assigns it to the DomainCertificateAuthorities field.
func (o *Broker) SetDomainCertificateAuthorities(v []CertificateAuthority) {
	o.DomainCertificateAuthorities = v
}

// GetTlsStandardDomainCertificateAuthoritiesEnabled returns the TlsStandardDomainCertificateAuthoritiesEnabled field value if set, zero value otherwise.
func (o *Broker) GetTlsStandardDomainCertificateAuthoritiesEnabled() bool {
	if o == nil || IsNil(o.TlsStandardDomainCertificateAuthoritiesEnabled) {
		var ret bool
		return ret
	}
	return *o.TlsStandardDomainCertificateAuthoritiesEnabled
}

// GetTlsStandardDomainCertificateAuthoritiesEnabledOk returns a tuple with the TlsStandardDomainCertificateAuthoritiesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetTlsStandardDomainCertificateAuthoritiesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsStandardDomainCertificateAuthoritiesEnabled) {
		return nil, false
	}
	return o.TlsStandardDomainCertificateAuthoritiesEnabled, true
}

// HasTlsStandardDomainCertificateAuthoritiesEnabled returns a boolean if a field has been set.
func (o *Broker) HasTlsStandardDomainCertificateAuthoritiesEnabled() bool {
	if o != nil && !IsNil(o.TlsStandardDomainCertificateAuthoritiesEnabled) {
		return true
	}

	return false
}

// SetTlsStandardDomainCertificateAuthoritiesEnabled gets a reference to the given bool and assigns it to the TlsStandardDomainCertificateAuthoritiesEnabled field.
func (o *Broker) SetTlsStandardDomainCertificateAuthoritiesEnabled(v bool) {
	o.TlsStandardDomainCertificateAuthoritiesEnabled = &v
}

// GetLdapProfiles returns the LdapProfiles field value if set, zero value otherwise.
func (o *Broker) GetLdapProfiles() []LdapProfile {
	if o == nil || IsNil(o.LdapProfiles) {
		var ret []LdapProfile
		return ret
	}
	return o.LdapProfiles
}

// GetLdapProfilesOk returns a tuple with the LdapProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetLdapProfilesOk() ([]LdapProfile, bool) {
	if o == nil || IsNil(o.LdapProfiles) {
		return nil, false
	}
	return o.LdapProfiles, true
}

// HasLdapProfiles returns a boolean if a field has been set.
func (o *Broker) HasLdapProfiles() bool {
	if o != nil && !IsNil(o.LdapProfiles) {
		return true
	}

	return false
}

// SetLdapProfiles gets a reference to the given []LdapProfile and assigns it to the LdapProfiles field.
func (o *Broker) SetLdapProfiles(v []LdapProfile) {
	o.LdapProfiles = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *Broker) GetCluster() Cluster {
	if o == nil || IsNil(o.Cluster) {
		var ret Cluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetClusterOk() (*Cluster, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *Broker) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given Cluster and assigns it to the Cluster field.
func (o *Broker) SetCluster(v Cluster) {
	o.Cluster = &v
}

// GetManagementReadOnlyLoginCredential returns the ManagementReadOnlyLoginCredential field value if set, zero value otherwise.
func (o *Broker) GetManagementReadOnlyLoginCredential() ManagementLoginCredential {
	if o == nil || IsNil(o.ManagementReadOnlyLoginCredential) {
		var ret ManagementLoginCredential
		return ret
	}
	return *o.ManagementReadOnlyLoginCredential
}

// GetManagementReadOnlyLoginCredentialOk returns a tuple with the ManagementReadOnlyLoginCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetManagementReadOnlyLoginCredentialOk() (*ManagementLoginCredential, bool) {
	if o == nil || IsNil(o.ManagementReadOnlyLoginCredential) {
		return nil, false
	}
	return o.ManagementReadOnlyLoginCredential, true
}

// HasManagementReadOnlyLoginCredential returns a boolean if a field has been set.
func (o *Broker) HasManagementReadOnlyLoginCredential() bool {
	if o != nil && !IsNil(o.ManagementReadOnlyLoginCredential) {
		return true
	}

	return false
}

// SetManagementReadOnlyLoginCredential gets a reference to the given ManagementLoginCredential and assigns it to the ManagementReadOnlyLoginCredential field.
func (o *Broker) SetManagementReadOnlyLoginCredential(v ManagementLoginCredential) {
	o.ManagementReadOnlyLoginCredential = &v
}

// GetMsgVpns returns the MsgVpns field value if set, zero value otherwise.
func (o *Broker) GetMsgVpns() []MsgVpn {
	if o == nil || IsNil(o.MsgVpns) {
		var ret []MsgVpn
		return ret
	}
	return o.MsgVpns
}

// GetMsgVpnsOk returns a tuple with the MsgVpns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetMsgVpnsOk() ([]MsgVpn, bool) {
	if o == nil || IsNil(o.MsgVpns) {
		return nil, false
	}
	return o.MsgVpns, true
}

// HasMsgVpns returns a boolean if a field has been set.
func (o *Broker) HasMsgVpns() bool {
	if o != nil && !IsNil(o.MsgVpns) {
		return true
	}

	return false
}

// SetMsgVpns gets a reference to the given []MsgVpn and assigns it to the MsgVpns field.
func (o *Broker) SetMsgVpns(v []MsgVpn) {
	o.MsgVpns = v
}

func (o Broker) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Broker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionFamily) {
		toSerialize["versionFamily"] = o.VersionFamily
	}
	if !IsNil(o.ServicePackageId) {
		toSerialize["servicePackageId"] = o.ServicePackageId
	}
	if !IsNil(o.MaxSpoolUsage) {
		toSerialize["maxSpoolUsage"] = o.MaxSpoolUsage
	}
	if !IsNil(o.DiskSize) {
		toSerialize["diskSize"] = o.DiskSize
	}
	if !IsNil(o.RedundancyGroupSslEnabled) {
		toSerialize["redundancyGroupSslEnabled"] = o.RedundancyGroupSslEnabled
	}
	if !IsNil(o.ConfigSyncSslEnabled) {
		toSerialize["configSyncSslEnabled"] = o.ConfigSyncSslEnabled
	}
	if !IsNil(o.MonitoringMode) {
		toSerialize["monitoringMode"] = o.MonitoringMode
	}
	if !IsNil(o.ClientCertificateAuthorities) {
		toSerialize["clientCertificateAuthorities"] = o.ClientCertificateAuthorities
	}
	if !IsNil(o.DomainCertificateAuthorities) {
		toSerialize["domainCertificateAuthorities"] = o.DomainCertificateAuthorities
	}
	if !IsNil(o.TlsStandardDomainCertificateAuthoritiesEnabled) {
		toSerialize["tlsStandardDomainCertificateAuthoritiesEnabled"] = o.TlsStandardDomainCertificateAuthoritiesEnabled
	}
	if !IsNil(o.LdapProfiles) {
		toSerialize["ldapProfiles"] = o.LdapProfiles
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.ManagementReadOnlyLoginCredential) {
		toSerialize["managementReadOnlyLoginCredential"] = o.ManagementReadOnlyLoginCredential
	}
	if !IsNil(o.MsgVpns) {
		toSerialize["msgVpns"] = o.MsgVpns
	}
	return toSerialize, nil
}

type NullableBroker struct {
	value *Broker
	isSet bool
}

func (v NullableBroker) Get() *Broker {
	return v.value
}

func (v *NullableBroker) Set(val *Broker) {
	v.value = val
	v.isSet = true
}

func (v NullableBroker) IsSet() bool {
	return v.isSet
}

func (v *NullableBroker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroker(val *Broker) *NullableBroker {
	return &NullableBroker{value: val, isSet: true}
}

func (v NullableBroker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


