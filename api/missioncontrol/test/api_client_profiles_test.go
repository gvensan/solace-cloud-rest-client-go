/*
MISSION CONTROL

Testing ClientProfilesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClientProfilesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClientProfilesApiService CreateClientProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ClientProfilesApi.CreateClientProfile(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientProfilesApiService DeleteClientProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var name string

		resp, httpRes, err := apiClient.ClientProfilesApi.DeleteClientProfile(context.Background(), serviceId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientProfilesApiService GetClientProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var name string

		resp, httpRes, err := apiClient.ClientProfilesApi.GetClientProfile(context.Background(), serviceId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientProfilesApiService GetClientProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string

		resp, httpRes, err := apiClient.ClientProfilesApi.GetClientProfiles(context.Background(), serviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientProfilesApiService ReplaceClientProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var name string

		resp, httpRes, err := apiClient.ClientProfilesApi.ReplaceClientProfile(context.Background(), serviceId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClientProfilesApiService UpdateClientProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceId string
		var name string

		resp, httpRes, err := apiClient.ClientProfilesApi.UpdateClientProfile(context.Background(), serviceId, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
