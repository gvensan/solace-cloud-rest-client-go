/*
MISSION CONTROL

Documentation for Mission Control API

API version: V2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClientProfileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientProfileRequest{}

// ClientProfileRequest The client profile configured on the event broker service.
type ClientProfileRequest struct {
	Name *string `json:"name,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to publish guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed) . The default is 'false'.
	AllowGuaranteedMsgSendEnabled *bool `json:"allowGuaranteedMsgSendEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to bind to topic endpoints or queues to receive guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed). The default is 'false'.
	AllowGuaranteedMsgReceiveEnabled *bool `json:"allowGuaranteedMsgReceiveEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to transfer data using compression. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'true'.
	CompressionEnabled *bool `json:"compressionEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to remain connected to the Message VPN when its replication state is Standby. This situation may occur when the Message VPN Replication state of the event broker service changes from Active to Standby. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	ReplicationAllowClientConnectWhenStandbyEnabled *bool `json:"replicationAllowClientConnectWhenStandbyEnabled,omitempty"`
	// Indicates whether client applications client applications assigned to the client profile are allowed to establish transacted sessions or XA sessions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	AllowTransactedSessionsEnabled *bool `json:"allowTransactedSessionsEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to establish Dynamic Messaging Routing (DMR) links (or bridge links) from the current Message VPN to another Message VPN in a separate event broker service. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	AllowBridgeConnectionsEnabled *bool `json:"allowBridgeConnectionsEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to create queues or topic endpoints. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	AllowGuaranteedEndpointCreateEnabled *bool `json:"allowGuaranteedEndpointCreateEnabled,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to use shared subscriptions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	AllowSharedSubscriptionsEnabled *bool `json:"allowSharedSubscriptionsEnabled,omitempty"`
	// The name of a queue template to copy settings from when a new queue is created by the client using the client profile. If the specified queue template does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiQueueManagementCopyFromOnCreateTemplateName.
	// Deprecated
	ApiQueueManagementCopyFromOnCreateName *string `json:"apiQueueManagementCopyFromOnCreateName,omitempty"`
	// The name of a queue template to copy settings from when a new queue is created by the client using the client profile. If the specified queue template does not exist, creation fails. 
	ApiQueueManagementCopyFromOnCreateTemplateName *string `json:"apiQueueManagementCopyFromOnCreateTemplateName,omitempty"`
	// The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiTopicEndpointManagementCopyFromOnCreateTemplateName.
	// Deprecated
	ApiTopicEndpointManagementCopyFromOnCreateName *string `json:"apiTopicEndpointManagementCopyFromOnCreateName,omitempty"`
	// The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails.
	ApiTopicEndpointManagementCopyFromOnCreateTemplateName *string `json:"apiTopicEndpointManagementCopyFromOnCreateTemplateName,omitempty"`
	// The minimum period of time (in seconds) that the event broker service will tolerate inactivity on the client connection. This keepalive value is also enforced for MQTT and SMF (Solace Message Format) connections. The keepalive timeout value is calculated based on the client provided timeout interval (3 x the keepalive interval for SMF, 1.5 x the keepalive interval for MQTT). The default is 30 and valid ranges are 3â€“3600.
	ServiceMinKeepaliveTimeout *int32 `json:"serviceMinKeepaliveTimeout,omitempty"`
	// Indicates whether clients using the client profile have the minimum keep-alive timeout enabled for SMF (Solace Message Format) connections. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'.
	ServiceSmfMinKeepaliveEnabled *bool `json:"serviceSmfMinKeepaliveEnabled,omitempty"`
	// The number of seconds a Web client has to send a request before its session times out and be terminated for being inactive. The default value is 30 seconds.
	ServiceWebInactiveTimeout *int32 `json:"serviceWebInactiveTimeout,omitempty"`
	// The maximum transport payload size (in bytes) before fragmentation occurs for clients using the client profile. The size of the header is not included.  Solace Message Format (SMF) messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages. The maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. The value range is 300 to 10000000, in bytes. The default is 1000000 bytes.  SMF messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages.  The maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. Note that large SMF messages can be fragmented across Web transport messages to respect the value set for the maximum possible Web payload.
	ServiceWebMaxPayload *int32 `json:"serviceWebMaxPayload,omitempty"`
	// The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.
	MaxConnectionCountPerClientUsername *int32 `json:"maxConnectionCountPerClientUsername,omitempty"`
	// The maximum permitted number of simultaneous Solace Message Format (SMF) client connections to the event broker that can be made using the same client username account. The default is the maximum value supported by the platform.
	ServiceSmfMaxConnectionCountPerClientUsername *int32 `json:"serviceSmfMaxConnectionCountPerClientUsername,omitempty"`
	// The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.
	ServiceWebMaxConnectionCountPerClientUsername *int32 `json:"serviceWebMaxConnectionCountPerClientUsername,omitempty"`
	// The maximum number of durable and non-durable queues and topic endpoints that can be owned by the clients using the same client username within a client profile. The default is 1000.
	MaxEndpointCountPerClientUsername *int32 `json:"maxEndpointCountPerClientUsername,omitempty"`
	// The maximum number of egress flows (that is, Guaranteed Message client receive flows or consumer flows) that can be created by a single client associated with this client profile. The default is 1000.
	MaxEgressFlowCount *int32 `json:"maxEgressFlowCount,omitempty"`
	// The maximum number of ingress flows (that is, Guaranteed Message client publish flows) that can be created by a single client associated with this client profile. The default is 1000.
	MaxIngressFlowCount *int32 `json:"maxIngressFlowCount,omitempty"`
	// The maximum number of subscriptions for a single client in the client profile. When you set this option, consider the total maximum number of permitted topic subscriptions and the total maximum number of client connections for the type of event broker that is used. That is, to ensure reliable system performance, you must find the right balance for your network, while staying within the system limits mentioned. The balance is generally between allowing the creation of many client applications and allowing each client to add a large number of topic subscriptions. The default varies by platform.
	MaxSubscriptionCount *int32 `json:"maxSubscriptionCount,omitempty"`
	// The maximum number of simultaneous transacted sessions and/or XA sessions allowed for a single client associated with the client profile. The default is 10.
	MaxTransactedSessionCount *int32 `json:"maxTransactedSessionCount,omitempty"`
	// The total maximum number of simultaneous transactions (both local transactions and transactions within the XA transaction branches) allowed for a single client associated with the client profile. The default varies by platform.
	MaxTransactionCount *int32 `json:"maxTransactionCount,omitempty"`
	// The egress queue maximum depth for Guaranteed Messages that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.
	QueueGuaranteed1MaxDepth *int32 `json:"queueGuaranteed1MaxDepth,omitempty"`
	// The minimum number of messages that must be on the Guaranteed Message queue before the queueâ€™s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 255. The value of 255 is recommended for memory usage optimized configurations, such as message applications; a value of 66000 is for WAN optimized configurations.
	QueueGuaranteed1MinMsgBurst *int32 `json:"queueGuaranteed1MinMsgBurst,omitempty"`
	// The egress queue maximum depth for Direct Messages 1 [Class of Service (COS) 1] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.
	QueueDirect1MaxDepth *int32 `json:"queueDirect1MaxDepth,omitempty"`
	// The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queueâ€™s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.
	QueueDirect1MinMsgBurst *int32 `json:"queueDirect1MinMsgBurst,omitempty"`
	// The egress queue maximum depth for Direct Messages 2 (COS 2) that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.
	QueueDirect2MaxDepth *int32 `json:"queueDirect2MaxDepth,omitempty"`
	// The minimum number of messages that must be on the Direct 2 (COS 2) queue before the queueâ€™s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.
	QueueDirect2MinMsgBurst *int32 `json:"queueDirect2MinMsgBurst,omitempty"`
	// The egress queue maximum depth for Direct Messages 3 [Class of Service (COS) 3] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.
	QueueDirect3MaxDepth *int32 `json:"queueDirect3MaxDepth,omitempty"`
	// The minimum number of messages that must be on the Direct 3 (COS 3) queue before the queueâ€™s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.
	QueueDirect3MinMsgBurst *int32 `json:"queueDirect3MinMsgBurst,omitempty"`
	// The egress queue maximum depth for Control 1 that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.
	QueueControl1MaxDepth *int32 `json:"queueControl1MaxDepth,omitempty"`
	// The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queueâ€™s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.
	QueueControl1MinMsgBurst *int32 `json:"queueControl1MinMsgBurst,omitempty"`
	// The TCP initial congestion window size is the number of segments that TCP sends before waiting for an acknowledgment from the peer. The TCP initial congestion window size is used when starting up a TCP connection or on recovery from idle (that is, no traffic). Larger values of the initial window allows a connection to come up to speed more quickly. For further details, refer to RFC 2581. Changing the TCP initial congestion window size from its default of 2 results in non-compliance with RFC 2581. Further, if this setting is set to a value too high, it may cause congestion in the network. Contact support before you attempt to change this TCP parameter.
	TcpCongestionWindowSize *int32 `json:"tcpCongestionWindowSize,omitempty"`
	// The maximum number of keepalive probes (from 2 to 5 ) that TCP should send before dropping the connection. The default is 5.
	TcpKeepaliveCount *int32 `json:"tcpKeepaliveCount,omitempty"`
	// The time (from 3 to 120 seconds) a connection must remain idle before TCP begins sending keepalive probes. The default is 3.
	TcpKeepaliveIdleTime *int32 `json:"tcpKeepaliveIdleTime,omitempty"`
	// The time (from 1 to 30 seconds) to set as the interval between individual keepalive probes. The default is 1.
	TcpKeepaliveInterval *int32 `json:"tcpKeepaliveInterval,omitempty"`
	// The TCP maximum segment size (MSS) used for client to the event broker service. The default is 1460.
	TcpMaxSegmentSize *int32 `json:"tcpMaxSegmentSize,omitempty"`
	// The TCP window size between the event broker service and the client. If the maximum window size is set to less than the bandwidth-delay product, then the TCP connection operates below its maximum potential throughput. If the maximum window is set to less than about twice the bandwidth-delay product, then occasional packet loss causes the TCP connection to operate below its maximum potential throughput as it handles the missing acknowledgments and retransmissions. The default is 256.  Alternately, if the TCP maximum window size is set too large, in the presence of a high offered load, TCP gradually increases its congestion window size until either the congestion window size reaches the maximum window size, or packet loss occurs in the network.  Initially, when the TCP congestion window size is small, the physical bandwidth-delay of the network acts as a memory buffer for packets in flight. But as the congestion window crosses the bandwidth-delay product, the buffering of in-flight packets moves to queues in event broker services and other equipment throughout the network. As the TCP congestion window continues to increase in size, these various equipment queues overflow, causing packet loss and TCP backoff.
	TcpMaxWindowSize *int32 `json:"tcpMaxWindowSize,omitempty"`
	// The amount of time to delay the delivery of messages to a client after the initial message has been delivered. You can specify a value from 0-6000 milliseconds. The default is 0.
	ElidingDelay *int32 `json:"elidingDelay,omitempty"`
	// Indicates whether clients assigned to the client profile are allowed to use eliding. Eliding allows clients to define a custom per-topic rate for client applications so they can effectively consume relevant messages, rather than queuing up outdated messages. For example, when eliding is configured, clients could receive direct messages for their topic subscriptions at a rate of at most five per second, per topicâ€“even though the source is publishing updates at a much higher rate. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'.
	ElidingEnabled *bool `json:"elidingEnabled,omitempty"`
	// The maximum number of topics the event broker service that can track for performing the eliding function on each client connection. You can specify a value from 1-320000. The default is 256.
	ElidingMaxTopicCount *int32 `json:"elidingMaxTopicCount,omitempty"`
	// Indicates whether clients assigned the client profile are allowed to return NACKs (negative acknowledgements) for guaranteed messages that do not have a that do not have a matching guaranteed message subscription. The value values are 'true' (allowed) and 'false' (not allowed). The default is 'false'.
	RejectMsgToSenderOnNoSubscriptionMatchEnabled *bool `json:"rejectMsgToSenderOnNoSubscriptionMatchEnabled,omitempty"`
	// Indicates whether clients assigned the client profile are allowed to use TLS/SSL encryption to protect the clients' credentials. This setting doesn't encrypt the data that is transmitted after the clients are authenticated and authorized. This also allows connecting client applications to request to downgrade of their TLS/SSL connections to the Message VPN to a plain-text connection, and if that Message VPN allows TLS/SSL connection downgrades, after the clientsÊ¼ login handshake are finished, their connections are downgraded. This means that the clientsÊ¼ authentication data is still encrypted, but the subsequent application data that is transmitted is sent as non-encrypted plain-text. The valid values are 'true (allowed) or 'false (not allowed). The default is 'true'.
	TlsAllowDowngradeToPlainTextEnabled *bool `json:"tlsAllowDowngradeToPlainTextEnabled,omitempty"`
	EventClientProvisionedEndpointSpoolUsageThreshold *ProvisionedEndpointSpoolUsageAlertThresholds `json:"eventClientProvisionedEndpointSpoolUsageThreshold,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewClientProfileRequest instantiates a new ClientProfileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientProfileRequest() *ClientProfileRequest {
	this := ClientProfileRequest{}
	return &this
}

// NewClientProfileRequestWithDefaults instantiates a new ClientProfileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientProfileRequestWithDefaults() *ClientProfileRequest {
	this := ClientProfileRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientProfileRequest) SetName(v string) {
	o.Name = &v
}

// GetAllowGuaranteedMsgSendEnabled returns the AllowGuaranteedMsgSendEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowGuaranteedMsgSendEnabled() bool {
	if o == nil || IsNil(o.AllowGuaranteedMsgSendEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowGuaranteedMsgSendEnabled
}

// GetAllowGuaranteedMsgSendEnabledOk returns a tuple with the AllowGuaranteedMsgSendEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowGuaranteedMsgSendEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGuaranteedMsgSendEnabled) {
		return nil, false
	}
	return o.AllowGuaranteedMsgSendEnabled, true
}

// HasAllowGuaranteedMsgSendEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowGuaranteedMsgSendEnabled() bool {
	if o != nil && !IsNil(o.AllowGuaranteedMsgSendEnabled) {
		return true
	}

	return false
}

// SetAllowGuaranteedMsgSendEnabled gets a reference to the given bool and assigns it to the AllowGuaranteedMsgSendEnabled field.
func (o *ClientProfileRequest) SetAllowGuaranteedMsgSendEnabled(v bool) {
	o.AllowGuaranteedMsgSendEnabled = &v
}

// GetAllowGuaranteedMsgReceiveEnabled returns the AllowGuaranteedMsgReceiveEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowGuaranteedMsgReceiveEnabled() bool {
	if o == nil || IsNil(o.AllowGuaranteedMsgReceiveEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowGuaranteedMsgReceiveEnabled
}

// GetAllowGuaranteedMsgReceiveEnabledOk returns a tuple with the AllowGuaranteedMsgReceiveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowGuaranteedMsgReceiveEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGuaranteedMsgReceiveEnabled) {
		return nil, false
	}
	return o.AllowGuaranteedMsgReceiveEnabled, true
}

// HasAllowGuaranteedMsgReceiveEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowGuaranteedMsgReceiveEnabled() bool {
	if o != nil && !IsNil(o.AllowGuaranteedMsgReceiveEnabled) {
		return true
	}

	return false
}

// SetAllowGuaranteedMsgReceiveEnabled gets a reference to the given bool and assigns it to the AllowGuaranteedMsgReceiveEnabled field.
func (o *ClientProfileRequest) SetAllowGuaranteedMsgReceiveEnabled(v bool) {
	o.AllowGuaranteedMsgReceiveEnabled = &v
}

// GetCompressionEnabled returns the CompressionEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetCompressionEnabled() bool {
	if o == nil || IsNil(o.CompressionEnabled) {
		var ret bool
		return ret
	}
	return *o.CompressionEnabled
}

// GetCompressionEnabledOk returns a tuple with the CompressionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetCompressionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressionEnabled) {
		return nil, false
	}
	return o.CompressionEnabled, true
}

// HasCompressionEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasCompressionEnabled() bool {
	if o != nil && !IsNil(o.CompressionEnabled) {
		return true
	}

	return false
}

// SetCompressionEnabled gets a reference to the given bool and assigns it to the CompressionEnabled field.
func (o *ClientProfileRequest) SetCompressionEnabled(v bool) {
	o.CompressionEnabled = &v
}

// GetReplicationAllowClientConnectWhenStandbyEnabled returns the ReplicationAllowClientConnectWhenStandbyEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetReplicationAllowClientConnectWhenStandbyEnabled() bool {
	if o == nil || IsNil(o.ReplicationAllowClientConnectWhenStandbyEnabled) {
		var ret bool
		return ret
	}
	return *o.ReplicationAllowClientConnectWhenStandbyEnabled
}

// GetReplicationAllowClientConnectWhenStandbyEnabledOk returns a tuple with the ReplicationAllowClientConnectWhenStandbyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetReplicationAllowClientConnectWhenStandbyEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplicationAllowClientConnectWhenStandbyEnabled) {
		return nil, false
	}
	return o.ReplicationAllowClientConnectWhenStandbyEnabled, true
}

// HasReplicationAllowClientConnectWhenStandbyEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasReplicationAllowClientConnectWhenStandbyEnabled() bool {
	if o != nil && !IsNil(o.ReplicationAllowClientConnectWhenStandbyEnabled) {
		return true
	}

	return false
}

// SetReplicationAllowClientConnectWhenStandbyEnabled gets a reference to the given bool and assigns it to the ReplicationAllowClientConnectWhenStandbyEnabled field.
func (o *ClientProfileRequest) SetReplicationAllowClientConnectWhenStandbyEnabled(v bool) {
	o.ReplicationAllowClientConnectWhenStandbyEnabled = &v
}

// GetAllowTransactedSessionsEnabled returns the AllowTransactedSessionsEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowTransactedSessionsEnabled() bool {
	if o == nil || IsNil(o.AllowTransactedSessionsEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowTransactedSessionsEnabled
}

// GetAllowTransactedSessionsEnabledOk returns a tuple with the AllowTransactedSessionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowTransactedSessionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTransactedSessionsEnabled) {
		return nil, false
	}
	return o.AllowTransactedSessionsEnabled, true
}

// HasAllowTransactedSessionsEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowTransactedSessionsEnabled() bool {
	if o != nil && !IsNil(o.AllowTransactedSessionsEnabled) {
		return true
	}

	return false
}

// SetAllowTransactedSessionsEnabled gets a reference to the given bool and assigns it to the AllowTransactedSessionsEnabled field.
func (o *ClientProfileRequest) SetAllowTransactedSessionsEnabled(v bool) {
	o.AllowTransactedSessionsEnabled = &v
}

// GetAllowBridgeConnectionsEnabled returns the AllowBridgeConnectionsEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowBridgeConnectionsEnabled() bool {
	if o == nil || IsNil(o.AllowBridgeConnectionsEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowBridgeConnectionsEnabled
}

// GetAllowBridgeConnectionsEnabledOk returns a tuple with the AllowBridgeConnectionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowBridgeConnectionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowBridgeConnectionsEnabled) {
		return nil, false
	}
	return o.AllowBridgeConnectionsEnabled, true
}

// HasAllowBridgeConnectionsEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowBridgeConnectionsEnabled() bool {
	if o != nil && !IsNil(o.AllowBridgeConnectionsEnabled) {
		return true
	}

	return false
}

// SetAllowBridgeConnectionsEnabled gets a reference to the given bool and assigns it to the AllowBridgeConnectionsEnabled field.
func (o *ClientProfileRequest) SetAllowBridgeConnectionsEnabled(v bool) {
	o.AllowBridgeConnectionsEnabled = &v
}

// GetAllowGuaranteedEndpointCreateEnabled returns the AllowGuaranteedEndpointCreateEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowGuaranteedEndpointCreateEnabled() bool {
	if o == nil || IsNil(o.AllowGuaranteedEndpointCreateEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowGuaranteedEndpointCreateEnabled
}

// GetAllowGuaranteedEndpointCreateEnabledOk returns a tuple with the AllowGuaranteedEndpointCreateEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowGuaranteedEndpointCreateEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowGuaranteedEndpointCreateEnabled) {
		return nil, false
	}
	return o.AllowGuaranteedEndpointCreateEnabled, true
}

// HasAllowGuaranteedEndpointCreateEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowGuaranteedEndpointCreateEnabled() bool {
	if o != nil && !IsNil(o.AllowGuaranteedEndpointCreateEnabled) {
		return true
	}

	return false
}

// SetAllowGuaranteedEndpointCreateEnabled gets a reference to the given bool and assigns it to the AllowGuaranteedEndpointCreateEnabled field.
func (o *ClientProfileRequest) SetAllowGuaranteedEndpointCreateEnabled(v bool) {
	o.AllowGuaranteedEndpointCreateEnabled = &v
}

// GetAllowSharedSubscriptionsEnabled returns the AllowSharedSubscriptionsEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetAllowSharedSubscriptionsEnabled() bool {
	if o == nil || IsNil(o.AllowSharedSubscriptionsEnabled) {
		var ret bool
		return ret
	}
	return *o.AllowSharedSubscriptionsEnabled
}

// GetAllowSharedSubscriptionsEnabledOk returns a tuple with the AllowSharedSubscriptionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetAllowSharedSubscriptionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSharedSubscriptionsEnabled) {
		return nil, false
	}
	return o.AllowSharedSubscriptionsEnabled, true
}

// HasAllowSharedSubscriptionsEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasAllowSharedSubscriptionsEnabled() bool {
	if o != nil && !IsNil(o.AllowSharedSubscriptionsEnabled) {
		return true
	}

	return false
}

// SetAllowSharedSubscriptionsEnabled gets a reference to the given bool and assigns it to the AllowSharedSubscriptionsEnabled field.
func (o *ClientProfileRequest) SetAllowSharedSubscriptionsEnabled(v bool) {
	o.AllowSharedSubscriptionsEnabled = &v
}

// GetApiQueueManagementCopyFromOnCreateName returns the ApiQueueManagementCopyFromOnCreateName field value if set, zero value otherwise.
// Deprecated
func (o *ClientProfileRequest) GetApiQueueManagementCopyFromOnCreateName() string {
	if o == nil || IsNil(o.ApiQueueManagementCopyFromOnCreateName) {
		var ret string
		return ret
	}
	return *o.ApiQueueManagementCopyFromOnCreateName
}

// GetApiQueueManagementCopyFromOnCreateNameOk returns a tuple with the ApiQueueManagementCopyFromOnCreateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ClientProfileRequest) GetApiQueueManagementCopyFromOnCreateNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiQueueManagementCopyFromOnCreateName) {
		return nil, false
	}
	return o.ApiQueueManagementCopyFromOnCreateName, true
}

// HasApiQueueManagementCopyFromOnCreateName returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasApiQueueManagementCopyFromOnCreateName() bool {
	if o != nil && !IsNil(o.ApiQueueManagementCopyFromOnCreateName) {
		return true
	}

	return false
}

// SetApiQueueManagementCopyFromOnCreateName gets a reference to the given string and assigns it to the ApiQueueManagementCopyFromOnCreateName field.
// Deprecated
func (o *ClientProfileRequest) SetApiQueueManagementCopyFromOnCreateName(v string) {
	o.ApiQueueManagementCopyFromOnCreateName = &v
}

// GetApiQueueManagementCopyFromOnCreateTemplateName returns the ApiQueueManagementCopyFromOnCreateTemplateName field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetApiQueueManagementCopyFromOnCreateTemplateName() string {
	if o == nil || IsNil(o.ApiQueueManagementCopyFromOnCreateTemplateName) {
		var ret string
		return ret
	}
	return *o.ApiQueueManagementCopyFromOnCreateTemplateName
}

// GetApiQueueManagementCopyFromOnCreateTemplateNameOk returns a tuple with the ApiQueueManagementCopyFromOnCreateTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetApiQueueManagementCopyFromOnCreateTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiQueueManagementCopyFromOnCreateTemplateName) {
		return nil, false
	}
	return o.ApiQueueManagementCopyFromOnCreateTemplateName, true
}

// HasApiQueueManagementCopyFromOnCreateTemplateName returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasApiQueueManagementCopyFromOnCreateTemplateName() bool {
	if o != nil && !IsNil(o.ApiQueueManagementCopyFromOnCreateTemplateName) {
		return true
	}

	return false
}

// SetApiQueueManagementCopyFromOnCreateTemplateName gets a reference to the given string and assigns it to the ApiQueueManagementCopyFromOnCreateTemplateName field.
func (o *ClientProfileRequest) SetApiQueueManagementCopyFromOnCreateTemplateName(v string) {
	o.ApiQueueManagementCopyFromOnCreateTemplateName = &v
}

// GetApiTopicEndpointManagementCopyFromOnCreateName returns the ApiTopicEndpointManagementCopyFromOnCreateName field value if set, zero value otherwise.
// Deprecated
func (o *ClientProfileRequest) GetApiTopicEndpointManagementCopyFromOnCreateName() string {
	if o == nil || IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateName) {
		var ret string
		return ret
	}
	return *o.ApiTopicEndpointManagementCopyFromOnCreateName
}

// GetApiTopicEndpointManagementCopyFromOnCreateNameOk returns a tuple with the ApiTopicEndpointManagementCopyFromOnCreateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ClientProfileRequest) GetApiTopicEndpointManagementCopyFromOnCreateNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateName) {
		return nil, false
	}
	return o.ApiTopicEndpointManagementCopyFromOnCreateName, true
}

// HasApiTopicEndpointManagementCopyFromOnCreateName returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasApiTopicEndpointManagementCopyFromOnCreateName() bool {
	if o != nil && !IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateName) {
		return true
	}

	return false
}

// SetApiTopicEndpointManagementCopyFromOnCreateName gets a reference to the given string and assigns it to the ApiTopicEndpointManagementCopyFromOnCreateName field.
// Deprecated
func (o *ClientProfileRequest) SetApiTopicEndpointManagementCopyFromOnCreateName(v string) {
	o.ApiTopicEndpointManagementCopyFromOnCreateName = &v
}

// GetApiTopicEndpointManagementCopyFromOnCreateTemplateName returns the ApiTopicEndpointManagementCopyFromOnCreateTemplateName field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetApiTopicEndpointManagementCopyFromOnCreateTemplateName() string {
	if o == nil || IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName) {
		var ret string
		return ret
	}
	return *o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName
}

// GetApiTopicEndpointManagementCopyFromOnCreateTemplateNameOk returns a tuple with the ApiTopicEndpointManagementCopyFromOnCreateTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetApiTopicEndpointManagementCopyFromOnCreateTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName) {
		return nil, false
	}
	return o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName, true
}

// HasApiTopicEndpointManagementCopyFromOnCreateTemplateName returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasApiTopicEndpointManagementCopyFromOnCreateTemplateName() bool {
	if o != nil && !IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName) {
		return true
	}

	return false
}

// SetApiTopicEndpointManagementCopyFromOnCreateTemplateName gets a reference to the given string and assigns it to the ApiTopicEndpointManagementCopyFromOnCreateTemplateName field.
func (o *ClientProfileRequest) SetApiTopicEndpointManagementCopyFromOnCreateTemplateName(v string) {
	o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName = &v
}

// GetServiceMinKeepaliveTimeout returns the ServiceMinKeepaliveTimeout field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceMinKeepaliveTimeout() int32 {
	if o == nil || IsNil(o.ServiceMinKeepaliveTimeout) {
		var ret int32
		return ret
	}
	return *o.ServiceMinKeepaliveTimeout
}

// GetServiceMinKeepaliveTimeoutOk returns a tuple with the ServiceMinKeepaliveTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceMinKeepaliveTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceMinKeepaliveTimeout) {
		return nil, false
	}
	return o.ServiceMinKeepaliveTimeout, true
}

// HasServiceMinKeepaliveTimeout returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceMinKeepaliveTimeout() bool {
	if o != nil && !IsNil(o.ServiceMinKeepaliveTimeout) {
		return true
	}

	return false
}

// SetServiceMinKeepaliveTimeout gets a reference to the given int32 and assigns it to the ServiceMinKeepaliveTimeout field.
func (o *ClientProfileRequest) SetServiceMinKeepaliveTimeout(v int32) {
	o.ServiceMinKeepaliveTimeout = &v
}

// GetServiceSmfMinKeepaliveEnabled returns the ServiceSmfMinKeepaliveEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceSmfMinKeepaliveEnabled() bool {
	if o == nil || IsNil(o.ServiceSmfMinKeepaliveEnabled) {
		var ret bool
		return ret
	}
	return *o.ServiceSmfMinKeepaliveEnabled
}

// GetServiceSmfMinKeepaliveEnabledOk returns a tuple with the ServiceSmfMinKeepaliveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceSmfMinKeepaliveEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ServiceSmfMinKeepaliveEnabled) {
		return nil, false
	}
	return o.ServiceSmfMinKeepaliveEnabled, true
}

// HasServiceSmfMinKeepaliveEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceSmfMinKeepaliveEnabled() bool {
	if o != nil && !IsNil(o.ServiceSmfMinKeepaliveEnabled) {
		return true
	}

	return false
}

// SetServiceSmfMinKeepaliveEnabled gets a reference to the given bool and assigns it to the ServiceSmfMinKeepaliveEnabled field.
func (o *ClientProfileRequest) SetServiceSmfMinKeepaliveEnabled(v bool) {
	o.ServiceSmfMinKeepaliveEnabled = &v
}

// GetServiceWebInactiveTimeout returns the ServiceWebInactiveTimeout field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceWebInactiveTimeout() int32 {
	if o == nil || IsNil(o.ServiceWebInactiveTimeout) {
		var ret int32
		return ret
	}
	return *o.ServiceWebInactiveTimeout
}

// GetServiceWebInactiveTimeoutOk returns a tuple with the ServiceWebInactiveTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceWebInactiveTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceWebInactiveTimeout) {
		return nil, false
	}
	return o.ServiceWebInactiveTimeout, true
}

// HasServiceWebInactiveTimeout returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceWebInactiveTimeout() bool {
	if o != nil && !IsNil(o.ServiceWebInactiveTimeout) {
		return true
	}

	return false
}

// SetServiceWebInactiveTimeout gets a reference to the given int32 and assigns it to the ServiceWebInactiveTimeout field.
func (o *ClientProfileRequest) SetServiceWebInactiveTimeout(v int32) {
	o.ServiceWebInactiveTimeout = &v
}

// GetServiceWebMaxPayload returns the ServiceWebMaxPayload field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceWebMaxPayload() int32 {
	if o == nil || IsNil(o.ServiceWebMaxPayload) {
		var ret int32
		return ret
	}
	return *o.ServiceWebMaxPayload
}

// GetServiceWebMaxPayloadOk returns a tuple with the ServiceWebMaxPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceWebMaxPayloadOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceWebMaxPayload) {
		return nil, false
	}
	return o.ServiceWebMaxPayload, true
}

// HasServiceWebMaxPayload returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceWebMaxPayload() bool {
	if o != nil && !IsNil(o.ServiceWebMaxPayload) {
		return true
	}

	return false
}

// SetServiceWebMaxPayload gets a reference to the given int32 and assigns it to the ServiceWebMaxPayload field.
func (o *ClientProfileRequest) SetServiceWebMaxPayload(v int32) {
	o.ServiceWebMaxPayload = &v
}

// GetMaxConnectionCountPerClientUsername returns the MaxConnectionCountPerClientUsername field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxConnectionCountPerClientUsername() int32 {
	if o == nil || IsNil(o.MaxConnectionCountPerClientUsername) {
		var ret int32
		return ret
	}
	return *o.MaxConnectionCountPerClientUsername
}

// GetMaxConnectionCountPerClientUsernameOk returns a tuple with the MaxConnectionCountPerClientUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxConnectionCountPerClientUsernameOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxConnectionCountPerClientUsername) {
		return nil, false
	}
	return o.MaxConnectionCountPerClientUsername, true
}

// HasMaxConnectionCountPerClientUsername returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxConnectionCountPerClientUsername() bool {
	if o != nil && !IsNil(o.MaxConnectionCountPerClientUsername) {
		return true
	}

	return false
}

// SetMaxConnectionCountPerClientUsername gets a reference to the given int32 and assigns it to the MaxConnectionCountPerClientUsername field.
func (o *ClientProfileRequest) SetMaxConnectionCountPerClientUsername(v int32) {
	o.MaxConnectionCountPerClientUsername = &v
}

// GetServiceSmfMaxConnectionCountPerClientUsername returns the ServiceSmfMaxConnectionCountPerClientUsername field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceSmfMaxConnectionCountPerClientUsername() int32 {
	if o == nil || IsNil(o.ServiceSmfMaxConnectionCountPerClientUsername) {
		var ret int32
		return ret
	}
	return *o.ServiceSmfMaxConnectionCountPerClientUsername
}

// GetServiceSmfMaxConnectionCountPerClientUsernameOk returns a tuple with the ServiceSmfMaxConnectionCountPerClientUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceSmfMaxConnectionCountPerClientUsernameOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceSmfMaxConnectionCountPerClientUsername) {
		return nil, false
	}
	return o.ServiceSmfMaxConnectionCountPerClientUsername, true
}

// HasServiceSmfMaxConnectionCountPerClientUsername returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceSmfMaxConnectionCountPerClientUsername() bool {
	if o != nil && !IsNil(o.ServiceSmfMaxConnectionCountPerClientUsername) {
		return true
	}

	return false
}

// SetServiceSmfMaxConnectionCountPerClientUsername gets a reference to the given int32 and assigns it to the ServiceSmfMaxConnectionCountPerClientUsername field.
func (o *ClientProfileRequest) SetServiceSmfMaxConnectionCountPerClientUsername(v int32) {
	o.ServiceSmfMaxConnectionCountPerClientUsername = &v
}

// GetServiceWebMaxConnectionCountPerClientUsername returns the ServiceWebMaxConnectionCountPerClientUsername field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetServiceWebMaxConnectionCountPerClientUsername() int32 {
	if o == nil || IsNil(o.ServiceWebMaxConnectionCountPerClientUsername) {
		var ret int32
		return ret
	}
	return *o.ServiceWebMaxConnectionCountPerClientUsername
}

// GetServiceWebMaxConnectionCountPerClientUsernameOk returns a tuple with the ServiceWebMaxConnectionCountPerClientUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetServiceWebMaxConnectionCountPerClientUsernameOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceWebMaxConnectionCountPerClientUsername) {
		return nil, false
	}
	return o.ServiceWebMaxConnectionCountPerClientUsername, true
}

// HasServiceWebMaxConnectionCountPerClientUsername returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasServiceWebMaxConnectionCountPerClientUsername() bool {
	if o != nil && !IsNil(o.ServiceWebMaxConnectionCountPerClientUsername) {
		return true
	}

	return false
}

// SetServiceWebMaxConnectionCountPerClientUsername gets a reference to the given int32 and assigns it to the ServiceWebMaxConnectionCountPerClientUsername field.
func (o *ClientProfileRequest) SetServiceWebMaxConnectionCountPerClientUsername(v int32) {
	o.ServiceWebMaxConnectionCountPerClientUsername = &v
}

// GetMaxEndpointCountPerClientUsername returns the MaxEndpointCountPerClientUsername field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxEndpointCountPerClientUsername() int32 {
	if o == nil || IsNil(o.MaxEndpointCountPerClientUsername) {
		var ret int32
		return ret
	}
	return *o.MaxEndpointCountPerClientUsername
}

// GetMaxEndpointCountPerClientUsernameOk returns a tuple with the MaxEndpointCountPerClientUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxEndpointCountPerClientUsernameOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEndpointCountPerClientUsername) {
		return nil, false
	}
	return o.MaxEndpointCountPerClientUsername, true
}

// HasMaxEndpointCountPerClientUsername returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxEndpointCountPerClientUsername() bool {
	if o != nil && !IsNil(o.MaxEndpointCountPerClientUsername) {
		return true
	}

	return false
}

// SetMaxEndpointCountPerClientUsername gets a reference to the given int32 and assigns it to the MaxEndpointCountPerClientUsername field.
func (o *ClientProfileRequest) SetMaxEndpointCountPerClientUsername(v int32) {
	o.MaxEndpointCountPerClientUsername = &v
}

// GetMaxEgressFlowCount returns the MaxEgressFlowCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxEgressFlowCount() int32 {
	if o == nil || IsNil(o.MaxEgressFlowCount) {
		var ret int32
		return ret
	}
	return *o.MaxEgressFlowCount
}

// GetMaxEgressFlowCountOk returns a tuple with the MaxEgressFlowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxEgressFlowCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEgressFlowCount) {
		return nil, false
	}
	return o.MaxEgressFlowCount, true
}

// HasMaxEgressFlowCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxEgressFlowCount() bool {
	if o != nil && !IsNil(o.MaxEgressFlowCount) {
		return true
	}

	return false
}

// SetMaxEgressFlowCount gets a reference to the given int32 and assigns it to the MaxEgressFlowCount field.
func (o *ClientProfileRequest) SetMaxEgressFlowCount(v int32) {
	o.MaxEgressFlowCount = &v
}

// GetMaxIngressFlowCount returns the MaxIngressFlowCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxIngressFlowCount() int32 {
	if o == nil || IsNil(o.MaxIngressFlowCount) {
		var ret int32
		return ret
	}
	return *o.MaxIngressFlowCount
}

// GetMaxIngressFlowCountOk returns a tuple with the MaxIngressFlowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxIngressFlowCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxIngressFlowCount) {
		return nil, false
	}
	return o.MaxIngressFlowCount, true
}

// HasMaxIngressFlowCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxIngressFlowCount() bool {
	if o != nil && !IsNil(o.MaxIngressFlowCount) {
		return true
	}

	return false
}

// SetMaxIngressFlowCount gets a reference to the given int32 and assigns it to the MaxIngressFlowCount field.
func (o *ClientProfileRequest) SetMaxIngressFlowCount(v int32) {
	o.MaxIngressFlowCount = &v
}

// GetMaxSubscriptionCount returns the MaxSubscriptionCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxSubscriptionCount() int32 {
	if o == nil || IsNil(o.MaxSubscriptionCount) {
		var ret int32
		return ret
	}
	return *o.MaxSubscriptionCount
}

// GetMaxSubscriptionCountOk returns a tuple with the MaxSubscriptionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxSubscriptionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSubscriptionCount) {
		return nil, false
	}
	return o.MaxSubscriptionCount, true
}

// HasMaxSubscriptionCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxSubscriptionCount() bool {
	if o != nil && !IsNil(o.MaxSubscriptionCount) {
		return true
	}

	return false
}

// SetMaxSubscriptionCount gets a reference to the given int32 and assigns it to the MaxSubscriptionCount field.
func (o *ClientProfileRequest) SetMaxSubscriptionCount(v int32) {
	o.MaxSubscriptionCount = &v
}

// GetMaxTransactedSessionCount returns the MaxTransactedSessionCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxTransactedSessionCount() int32 {
	if o == nil || IsNil(o.MaxTransactedSessionCount) {
		var ret int32
		return ret
	}
	return *o.MaxTransactedSessionCount
}

// GetMaxTransactedSessionCountOk returns a tuple with the MaxTransactedSessionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxTransactedSessionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTransactedSessionCount) {
		return nil, false
	}
	return o.MaxTransactedSessionCount, true
}

// HasMaxTransactedSessionCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxTransactedSessionCount() bool {
	if o != nil && !IsNil(o.MaxTransactedSessionCount) {
		return true
	}

	return false
}

// SetMaxTransactedSessionCount gets a reference to the given int32 and assigns it to the MaxTransactedSessionCount field.
func (o *ClientProfileRequest) SetMaxTransactedSessionCount(v int32) {
	o.MaxTransactedSessionCount = &v
}

// GetMaxTransactionCount returns the MaxTransactionCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetMaxTransactionCount() int32 {
	if o == nil || IsNil(o.MaxTransactionCount) {
		var ret int32
		return ret
	}
	return *o.MaxTransactionCount
}

// GetMaxTransactionCountOk returns a tuple with the MaxTransactionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetMaxTransactionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTransactionCount) {
		return nil, false
	}
	return o.MaxTransactionCount, true
}

// HasMaxTransactionCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasMaxTransactionCount() bool {
	if o != nil && !IsNil(o.MaxTransactionCount) {
		return true
	}

	return false
}

// SetMaxTransactionCount gets a reference to the given int32 and assigns it to the MaxTransactionCount field.
func (o *ClientProfileRequest) SetMaxTransactionCount(v int32) {
	o.MaxTransactionCount = &v
}

// GetQueueGuaranteed1MaxDepth returns the QueueGuaranteed1MaxDepth field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueGuaranteed1MaxDepth() int32 {
	if o == nil || IsNil(o.QueueGuaranteed1MaxDepth) {
		var ret int32
		return ret
	}
	return *o.QueueGuaranteed1MaxDepth
}

// GetQueueGuaranteed1MaxDepthOk returns a tuple with the QueueGuaranteed1MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueGuaranteed1MaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueGuaranteed1MaxDepth) {
		return nil, false
	}
	return o.QueueGuaranteed1MaxDepth, true
}

// HasQueueGuaranteed1MaxDepth returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueGuaranteed1MaxDepth() bool {
	if o != nil && !IsNil(o.QueueGuaranteed1MaxDepth) {
		return true
	}

	return false
}

// SetQueueGuaranteed1MaxDepth gets a reference to the given int32 and assigns it to the QueueGuaranteed1MaxDepth field.
func (o *ClientProfileRequest) SetQueueGuaranteed1MaxDepth(v int32) {
	o.QueueGuaranteed1MaxDepth = &v
}

// GetQueueGuaranteed1MinMsgBurst returns the QueueGuaranteed1MinMsgBurst field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueGuaranteed1MinMsgBurst() int32 {
	if o == nil || IsNil(o.QueueGuaranteed1MinMsgBurst) {
		var ret int32
		return ret
	}
	return *o.QueueGuaranteed1MinMsgBurst
}

// GetQueueGuaranteed1MinMsgBurstOk returns a tuple with the QueueGuaranteed1MinMsgBurst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueGuaranteed1MinMsgBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueGuaranteed1MinMsgBurst) {
		return nil, false
	}
	return o.QueueGuaranteed1MinMsgBurst, true
}

// HasQueueGuaranteed1MinMsgBurst returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueGuaranteed1MinMsgBurst() bool {
	if o != nil && !IsNil(o.QueueGuaranteed1MinMsgBurst) {
		return true
	}

	return false
}

// SetQueueGuaranteed1MinMsgBurst gets a reference to the given int32 and assigns it to the QueueGuaranteed1MinMsgBurst field.
func (o *ClientProfileRequest) SetQueueGuaranteed1MinMsgBurst(v int32) {
	o.QueueGuaranteed1MinMsgBurst = &v
}

// GetQueueDirect1MaxDepth returns the QueueDirect1MaxDepth field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect1MaxDepth() int32 {
	if o == nil || IsNil(o.QueueDirect1MaxDepth) {
		var ret int32
		return ret
	}
	return *o.QueueDirect1MaxDepth
}

// GetQueueDirect1MaxDepthOk returns a tuple with the QueueDirect1MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect1MaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect1MaxDepth) {
		return nil, false
	}
	return o.QueueDirect1MaxDepth, true
}

// HasQueueDirect1MaxDepth returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect1MaxDepth() bool {
	if o != nil && !IsNil(o.QueueDirect1MaxDepth) {
		return true
	}

	return false
}

// SetQueueDirect1MaxDepth gets a reference to the given int32 and assigns it to the QueueDirect1MaxDepth field.
func (o *ClientProfileRequest) SetQueueDirect1MaxDepth(v int32) {
	o.QueueDirect1MaxDepth = &v
}

// GetQueueDirect1MinMsgBurst returns the QueueDirect1MinMsgBurst field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect1MinMsgBurst() int32 {
	if o == nil || IsNil(o.QueueDirect1MinMsgBurst) {
		var ret int32
		return ret
	}
	return *o.QueueDirect1MinMsgBurst
}

// GetQueueDirect1MinMsgBurstOk returns a tuple with the QueueDirect1MinMsgBurst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect1MinMsgBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect1MinMsgBurst) {
		return nil, false
	}
	return o.QueueDirect1MinMsgBurst, true
}

// HasQueueDirect1MinMsgBurst returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect1MinMsgBurst() bool {
	if o != nil && !IsNil(o.QueueDirect1MinMsgBurst) {
		return true
	}

	return false
}

// SetQueueDirect1MinMsgBurst gets a reference to the given int32 and assigns it to the QueueDirect1MinMsgBurst field.
func (o *ClientProfileRequest) SetQueueDirect1MinMsgBurst(v int32) {
	o.QueueDirect1MinMsgBurst = &v
}

// GetQueueDirect2MaxDepth returns the QueueDirect2MaxDepth field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect2MaxDepth() int32 {
	if o == nil || IsNil(o.QueueDirect2MaxDepth) {
		var ret int32
		return ret
	}
	return *o.QueueDirect2MaxDepth
}

// GetQueueDirect2MaxDepthOk returns a tuple with the QueueDirect2MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect2MaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect2MaxDepth) {
		return nil, false
	}
	return o.QueueDirect2MaxDepth, true
}

// HasQueueDirect2MaxDepth returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect2MaxDepth() bool {
	if o != nil && !IsNil(o.QueueDirect2MaxDepth) {
		return true
	}

	return false
}

// SetQueueDirect2MaxDepth gets a reference to the given int32 and assigns it to the QueueDirect2MaxDepth field.
func (o *ClientProfileRequest) SetQueueDirect2MaxDepth(v int32) {
	o.QueueDirect2MaxDepth = &v
}

// GetQueueDirect2MinMsgBurst returns the QueueDirect2MinMsgBurst field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect2MinMsgBurst() int32 {
	if o == nil || IsNil(o.QueueDirect2MinMsgBurst) {
		var ret int32
		return ret
	}
	return *o.QueueDirect2MinMsgBurst
}

// GetQueueDirect2MinMsgBurstOk returns a tuple with the QueueDirect2MinMsgBurst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect2MinMsgBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect2MinMsgBurst) {
		return nil, false
	}
	return o.QueueDirect2MinMsgBurst, true
}

// HasQueueDirect2MinMsgBurst returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect2MinMsgBurst() bool {
	if o != nil && !IsNil(o.QueueDirect2MinMsgBurst) {
		return true
	}

	return false
}

// SetQueueDirect2MinMsgBurst gets a reference to the given int32 and assigns it to the QueueDirect2MinMsgBurst field.
func (o *ClientProfileRequest) SetQueueDirect2MinMsgBurst(v int32) {
	o.QueueDirect2MinMsgBurst = &v
}

// GetQueueDirect3MaxDepth returns the QueueDirect3MaxDepth field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect3MaxDepth() int32 {
	if o == nil || IsNil(o.QueueDirect3MaxDepth) {
		var ret int32
		return ret
	}
	return *o.QueueDirect3MaxDepth
}

// GetQueueDirect3MaxDepthOk returns a tuple with the QueueDirect3MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect3MaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect3MaxDepth) {
		return nil, false
	}
	return o.QueueDirect3MaxDepth, true
}

// HasQueueDirect3MaxDepth returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect3MaxDepth() bool {
	if o != nil && !IsNil(o.QueueDirect3MaxDepth) {
		return true
	}

	return false
}

// SetQueueDirect3MaxDepth gets a reference to the given int32 and assigns it to the QueueDirect3MaxDepth field.
func (o *ClientProfileRequest) SetQueueDirect3MaxDepth(v int32) {
	o.QueueDirect3MaxDepth = &v
}

// GetQueueDirect3MinMsgBurst returns the QueueDirect3MinMsgBurst field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueDirect3MinMsgBurst() int32 {
	if o == nil || IsNil(o.QueueDirect3MinMsgBurst) {
		var ret int32
		return ret
	}
	return *o.QueueDirect3MinMsgBurst
}

// GetQueueDirect3MinMsgBurstOk returns a tuple with the QueueDirect3MinMsgBurst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueDirect3MinMsgBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueDirect3MinMsgBurst) {
		return nil, false
	}
	return o.QueueDirect3MinMsgBurst, true
}

// HasQueueDirect3MinMsgBurst returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueDirect3MinMsgBurst() bool {
	if o != nil && !IsNil(o.QueueDirect3MinMsgBurst) {
		return true
	}

	return false
}

// SetQueueDirect3MinMsgBurst gets a reference to the given int32 and assigns it to the QueueDirect3MinMsgBurst field.
func (o *ClientProfileRequest) SetQueueDirect3MinMsgBurst(v int32) {
	o.QueueDirect3MinMsgBurst = &v
}

// GetQueueControl1MaxDepth returns the QueueControl1MaxDepth field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueControl1MaxDepth() int32 {
	if o == nil || IsNil(o.QueueControl1MaxDepth) {
		var ret int32
		return ret
	}
	return *o.QueueControl1MaxDepth
}

// GetQueueControl1MaxDepthOk returns a tuple with the QueueControl1MaxDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueControl1MaxDepthOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueControl1MaxDepth) {
		return nil, false
	}
	return o.QueueControl1MaxDepth, true
}

// HasQueueControl1MaxDepth returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueControl1MaxDepth() bool {
	if o != nil && !IsNil(o.QueueControl1MaxDepth) {
		return true
	}

	return false
}

// SetQueueControl1MaxDepth gets a reference to the given int32 and assigns it to the QueueControl1MaxDepth field.
func (o *ClientProfileRequest) SetQueueControl1MaxDepth(v int32) {
	o.QueueControl1MaxDepth = &v
}

// GetQueueControl1MinMsgBurst returns the QueueControl1MinMsgBurst field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetQueueControl1MinMsgBurst() int32 {
	if o == nil || IsNil(o.QueueControl1MinMsgBurst) {
		var ret int32
		return ret
	}
	return *o.QueueControl1MinMsgBurst
}

// GetQueueControl1MinMsgBurstOk returns a tuple with the QueueControl1MinMsgBurst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetQueueControl1MinMsgBurstOk() (*int32, bool) {
	if o == nil || IsNil(o.QueueControl1MinMsgBurst) {
		return nil, false
	}
	return o.QueueControl1MinMsgBurst, true
}

// HasQueueControl1MinMsgBurst returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasQueueControl1MinMsgBurst() bool {
	if o != nil && !IsNil(o.QueueControl1MinMsgBurst) {
		return true
	}

	return false
}

// SetQueueControl1MinMsgBurst gets a reference to the given int32 and assigns it to the QueueControl1MinMsgBurst field.
func (o *ClientProfileRequest) SetQueueControl1MinMsgBurst(v int32) {
	o.QueueControl1MinMsgBurst = &v
}

// GetTcpCongestionWindowSize returns the TcpCongestionWindowSize field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpCongestionWindowSize() int32 {
	if o == nil || IsNil(o.TcpCongestionWindowSize) {
		var ret int32
		return ret
	}
	return *o.TcpCongestionWindowSize
}

// GetTcpCongestionWindowSizeOk returns a tuple with the TcpCongestionWindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpCongestionWindowSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpCongestionWindowSize) {
		return nil, false
	}
	return o.TcpCongestionWindowSize, true
}

// HasTcpCongestionWindowSize returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpCongestionWindowSize() bool {
	if o != nil && !IsNil(o.TcpCongestionWindowSize) {
		return true
	}

	return false
}

// SetTcpCongestionWindowSize gets a reference to the given int32 and assigns it to the TcpCongestionWindowSize field.
func (o *ClientProfileRequest) SetTcpCongestionWindowSize(v int32) {
	o.TcpCongestionWindowSize = &v
}

// GetTcpKeepaliveCount returns the TcpKeepaliveCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpKeepaliveCount() int32 {
	if o == nil || IsNil(o.TcpKeepaliveCount) {
		var ret int32
		return ret
	}
	return *o.TcpKeepaliveCount
}

// GetTcpKeepaliveCountOk returns a tuple with the TcpKeepaliveCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpKeepaliveCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpKeepaliveCount) {
		return nil, false
	}
	return o.TcpKeepaliveCount, true
}

// HasTcpKeepaliveCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpKeepaliveCount() bool {
	if o != nil && !IsNil(o.TcpKeepaliveCount) {
		return true
	}

	return false
}

// SetTcpKeepaliveCount gets a reference to the given int32 and assigns it to the TcpKeepaliveCount field.
func (o *ClientProfileRequest) SetTcpKeepaliveCount(v int32) {
	o.TcpKeepaliveCount = &v
}

// GetTcpKeepaliveIdleTime returns the TcpKeepaliveIdleTime field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpKeepaliveIdleTime() int32 {
	if o == nil || IsNil(o.TcpKeepaliveIdleTime) {
		var ret int32
		return ret
	}
	return *o.TcpKeepaliveIdleTime
}

// GetTcpKeepaliveIdleTimeOk returns a tuple with the TcpKeepaliveIdleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpKeepaliveIdleTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpKeepaliveIdleTime) {
		return nil, false
	}
	return o.TcpKeepaliveIdleTime, true
}

// HasTcpKeepaliveIdleTime returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpKeepaliveIdleTime() bool {
	if o != nil && !IsNil(o.TcpKeepaliveIdleTime) {
		return true
	}

	return false
}

// SetTcpKeepaliveIdleTime gets a reference to the given int32 and assigns it to the TcpKeepaliveIdleTime field.
func (o *ClientProfileRequest) SetTcpKeepaliveIdleTime(v int32) {
	o.TcpKeepaliveIdleTime = &v
}

// GetTcpKeepaliveInterval returns the TcpKeepaliveInterval field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpKeepaliveInterval() int32 {
	if o == nil || IsNil(o.TcpKeepaliveInterval) {
		var ret int32
		return ret
	}
	return *o.TcpKeepaliveInterval
}

// GetTcpKeepaliveIntervalOk returns a tuple with the TcpKeepaliveInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpKeepaliveIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpKeepaliveInterval) {
		return nil, false
	}
	return o.TcpKeepaliveInterval, true
}

// HasTcpKeepaliveInterval returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpKeepaliveInterval() bool {
	if o != nil && !IsNil(o.TcpKeepaliveInterval) {
		return true
	}

	return false
}

// SetTcpKeepaliveInterval gets a reference to the given int32 and assigns it to the TcpKeepaliveInterval field.
func (o *ClientProfileRequest) SetTcpKeepaliveInterval(v int32) {
	o.TcpKeepaliveInterval = &v
}

// GetTcpMaxSegmentSize returns the TcpMaxSegmentSize field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpMaxSegmentSize() int32 {
	if o == nil || IsNil(o.TcpMaxSegmentSize) {
		var ret int32
		return ret
	}
	return *o.TcpMaxSegmentSize
}

// GetTcpMaxSegmentSizeOk returns a tuple with the TcpMaxSegmentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpMaxSegmentSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpMaxSegmentSize) {
		return nil, false
	}
	return o.TcpMaxSegmentSize, true
}

// HasTcpMaxSegmentSize returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpMaxSegmentSize() bool {
	if o != nil && !IsNil(o.TcpMaxSegmentSize) {
		return true
	}

	return false
}

// SetTcpMaxSegmentSize gets a reference to the given int32 and assigns it to the TcpMaxSegmentSize field.
func (o *ClientProfileRequest) SetTcpMaxSegmentSize(v int32) {
	o.TcpMaxSegmentSize = &v
}

// GetTcpMaxWindowSize returns the TcpMaxWindowSize field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTcpMaxWindowSize() int32 {
	if o == nil || IsNil(o.TcpMaxWindowSize) {
		var ret int32
		return ret
	}
	return *o.TcpMaxWindowSize
}

// GetTcpMaxWindowSizeOk returns a tuple with the TcpMaxWindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTcpMaxWindowSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpMaxWindowSize) {
		return nil, false
	}
	return o.TcpMaxWindowSize, true
}

// HasTcpMaxWindowSize returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTcpMaxWindowSize() bool {
	if o != nil && !IsNil(o.TcpMaxWindowSize) {
		return true
	}

	return false
}

// SetTcpMaxWindowSize gets a reference to the given int32 and assigns it to the TcpMaxWindowSize field.
func (o *ClientProfileRequest) SetTcpMaxWindowSize(v int32) {
	o.TcpMaxWindowSize = &v
}

// GetElidingDelay returns the ElidingDelay field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetElidingDelay() int32 {
	if o == nil || IsNil(o.ElidingDelay) {
		var ret int32
		return ret
	}
	return *o.ElidingDelay
}

// GetElidingDelayOk returns a tuple with the ElidingDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetElidingDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.ElidingDelay) {
		return nil, false
	}
	return o.ElidingDelay, true
}

// HasElidingDelay returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasElidingDelay() bool {
	if o != nil && !IsNil(o.ElidingDelay) {
		return true
	}

	return false
}

// SetElidingDelay gets a reference to the given int32 and assigns it to the ElidingDelay field.
func (o *ClientProfileRequest) SetElidingDelay(v int32) {
	o.ElidingDelay = &v
}

// GetElidingEnabled returns the ElidingEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetElidingEnabled() bool {
	if o == nil || IsNil(o.ElidingEnabled) {
		var ret bool
		return ret
	}
	return *o.ElidingEnabled
}

// GetElidingEnabledOk returns a tuple with the ElidingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetElidingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ElidingEnabled) {
		return nil, false
	}
	return o.ElidingEnabled, true
}

// HasElidingEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasElidingEnabled() bool {
	if o != nil && !IsNil(o.ElidingEnabled) {
		return true
	}

	return false
}

// SetElidingEnabled gets a reference to the given bool and assigns it to the ElidingEnabled field.
func (o *ClientProfileRequest) SetElidingEnabled(v bool) {
	o.ElidingEnabled = &v
}

// GetElidingMaxTopicCount returns the ElidingMaxTopicCount field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetElidingMaxTopicCount() int32 {
	if o == nil || IsNil(o.ElidingMaxTopicCount) {
		var ret int32
		return ret
	}
	return *o.ElidingMaxTopicCount
}

// GetElidingMaxTopicCountOk returns a tuple with the ElidingMaxTopicCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetElidingMaxTopicCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ElidingMaxTopicCount) {
		return nil, false
	}
	return o.ElidingMaxTopicCount, true
}

// HasElidingMaxTopicCount returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasElidingMaxTopicCount() bool {
	if o != nil && !IsNil(o.ElidingMaxTopicCount) {
		return true
	}

	return false
}

// SetElidingMaxTopicCount gets a reference to the given int32 and assigns it to the ElidingMaxTopicCount field.
func (o *ClientProfileRequest) SetElidingMaxTopicCount(v int32) {
	o.ElidingMaxTopicCount = &v
}

// GetRejectMsgToSenderOnNoSubscriptionMatchEnabled returns the RejectMsgToSenderOnNoSubscriptionMatchEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetRejectMsgToSenderOnNoSubscriptionMatchEnabled() bool {
	if o == nil || IsNil(o.RejectMsgToSenderOnNoSubscriptionMatchEnabled) {
		var ret bool
		return ret
	}
	return *o.RejectMsgToSenderOnNoSubscriptionMatchEnabled
}

// GetRejectMsgToSenderOnNoSubscriptionMatchEnabledOk returns a tuple with the RejectMsgToSenderOnNoSubscriptionMatchEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetRejectMsgToSenderOnNoSubscriptionMatchEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RejectMsgToSenderOnNoSubscriptionMatchEnabled) {
		return nil, false
	}
	return o.RejectMsgToSenderOnNoSubscriptionMatchEnabled, true
}

// HasRejectMsgToSenderOnNoSubscriptionMatchEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasRejectMsgToSenderOnNoSubscriptionMatchEnabled() bool {
	if o != nil && !IsNil(o.RejectMsgToSenderOnNoSubscriptionMatchEnabled) {
		return true
	}

	return false
}

// SetRejectMsgToSenderOnNoSubscriptionMatchEnabled gets a reference to the given bool and assigns it to the RejectMsgToSenderOnNoSubscriptionMatchEnabled field.
func (o *ClientProfileRequest) SetRejectMsgToSenderOnNoSubscriptionMatchEnabled(v bool) {
	o.RejectMsgToSenderOnNoSubscriptionMatchEnabled = &v
}

// GetTlsAllowDowngradeToPlainTextEnabled returns the TlsAllowDowngradeToPlainTextEnabled field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetTlsAllowDowngradeToPlainTextEnabled() bool {
	if o == nil || IsNil(o.TlsAllowDowngradeToPlainTextEnabled) {
		var ret bool
		return ret
	}
	return *o.TlsAllowDowngradeToPlainTextEnabled
}

// GetTlsAllowDowngradeToPlainTextEnabledOk returns a tuple with the TlsAllowDowngradeToPlainTextEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTlsAllowDowngradeToPlainTextEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsAllowDowngradeToPlainTextEnabled) {
		return nil, false
	}
	return o.TlsAllowDowngradeToPlainTextEnabled, true
}

// HasTlsAllowDowngradeToPlainTextEnabled returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasTlsAllowDowngradeToPlainTextEnabled() bool {
	if o != nil && !IsNil(o.TlsAllowDowngradeToPlainTextEnabled) {
		return true
	}

	return false
}

// SetTlsAllowDowngradeToPlainTextEnabled gets a reference to the given bool and assigns it to the TlsAllowDowngradeToPlainTextEnabled field.
func (o *ClientProfileRequest) SetTlsAllowDowngradeToPlainTextEnabled(v bool) {
	o.TlsAllowDowngradeToPlainTextEnabled = &v
}

// GetEventClientProvisionedEndpointSpoolUsageThreshold returns the EventClientProvisionedEndpointSpoolUsageThreshold field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetEventClientProvisionedEndpointSpoolUsageThreshold() ProvisionedEndpointSpoolUsageAlertThresholds {
	if o == nil || IsNil(o.EventClientProvisionedEndpointSpoolUsageThreshold) {
		var ret ProvisionedEndpointSpoolUsageAlertThresholds
		return ret
	}
	return *o.EventClientProvisionedEndpointSpoolUsageThreshold
}

// GetEventClientProvisionedEndpointSpoolUsageThresholdOk returns a tuple with the EventClientProvisionedEndpointSpoolUsageThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetEventClientProvisionedEndpointSpoolUsageThresholdOk() (*ProvisionedEndpointSpoolUsageAlertThresholds, bool) {
	if o == nil || IsNil(o.EventClientProvisionedEndpointSpoolUsageThreshold) {
		return nil, false
	}
	return o.EventClientProvisionedEndpointSpoolUsageThreshold, true
}

// HasEventClientProvisionedEndpointSpoolUsageThreshold returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasEventClientProvisionedEndpointSpoolUsageThreshold() bool {
	if o != nil && !IsNil(o.EventClientProvisionedEndpointSpoolUsageThreshold) {
		return true
	}

	return false
}

// SetEventClientProvisionedEndpointSpoolUsageThreshold gets a reference to the given ProvisionedEndpointSpoolUsageAlertThresholds and assigns it to the EventClientProvisionedEndpointSpoolUsageThreshold field.
func (o *ClientProfileRequest) SetEventClientProvisionedEndpointSpoolUsageThreshold(v ProvisionedEndpointSpoolUsageAlertThresholds) {
	o.EventClientProvisionedEndpointSpoolUsageThreshold = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClientProfileRequest) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ClientProfileRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientProfileRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ClientProfileRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ClientProfileRequest) SetType(v string) {
	o.Type = &v
}

func (o ClientProfileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientProfileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AllowGuaranteedMsgSendEnabled) {
		toSerialize["allowGuaranteedMsgSendEnabled"] = o.AllowGuaranteedMsgSendEnabled
	}
	if !IsNil(o.AllowGuaranteedMsgReceiveEnabled) {
		toSerialize["allowGuaranteedMsgReceiveEnabled"] = o.AllowGuaranteedMsgReceiveEnabled
	}
	if !IsNil(o.CompressionEnabled) {
		toSerialize["compressionEnabled"] = o.CompressionEnabled
	}
	if !IsNil(o.ReplicationAllowClientConnectWhenStandbyEnabled) {
		toSerialize["replicationAllowClientConnectWhenStandbyEnabled"] = o.ReplicationAllowClientConnectWhenStandbyEnabled
	}
	if !IsNil(o.AllowTransactedSessionsEnabled) {
		toSerialize["allowTransactedSessionsEnabled"] = o.AllowTransactedSessionsEnabled
	}
	if !IsNil(o.AllowBridgeConnectionsEnabled) {
		toSerialize["allowBridgeConnectionsEnabled"] = o.AllowBridgeConnectionsEnabled
	}
	if !IsNil(o.AllowGuaranteedEndpointCreateEnabled) {
		toSerialize["allowGuaranteedEndpointCreateEnabled"] = o.AllowGuaranteedEndpointCreateEnabled
	}
	if !IsNil(o.AllowSharedSubscriptionsEnabled) {
		toSerialize["allowSharedSubscriptionsEnabled"] = o.AllowSharedSubscriptionsEnabled
	}
	if !IsNil(o.ApiQueueManagementCopyFromOnCreateName) {
		toSerialize["apiQueueManagementCopyFromOnCreateName"] = o.ApiQueueManagementCopyFromOnCreateName
	}
	if !IsNil(o.ApiQueueManagementCopyFromOnCreateTemplateName) {
		toSerialize["apiQueueManagementCopyFromOnCreateTemplateName"] = o.ApiQueueManagementCopyFromOnCreateTemplateName
	}
	if !IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateName) {
		toSerialize["apiTopicEndpointManagementCopyFromOnCreateName"] = o.ApiTopicEndpointManagementCopyFromOnCreateName
	}
	if !IsNil(o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName) {
		toSerialize["apiTopicEndpointManagementCopyFromOnCreateTemplateName"] = o.ApiTopicEndpointManagementCopyFromOnCreateTemplateName
	}
	if !IsNil(o.ServiceMinKeepaliveTimeout) {
		toSerialize["serviceMinKeepaliveTimeout"] = o.ServiceMinKeepaliveTimeout
	}
	if !IsNil(o.ServiceSmfMinKeepaliveEnabled) {
		toSerialize["serviceSmfMinKeepaliveEnabled"] = o.ServiceSmfMinKeepaliveEnabled
	}
	if !IsNil(o.ServiceWebInactiveTimeout) {
		toSerialize["serviceWebInactiveTimeout"] = o.ServiceWebInactiveTimeout
	}
	if !IsNil(o.ServiceWebMaxPayload) {
		toSerialize["serviceWebMaxPayload"] = o.ServiceWebMaxPayload
	}
	if !IsNil(o.MaxConnectionCountPerClientUsername) {
		toSerialize["maxConnectionCountPerClientUsername"] = o.MaxConnectionCountPerClientUsername
	}
	if !IsNil(o.ServiceSmfMaxConnectionCountPerClientUsername) {
		toSerialize["serviceSmfMaxConnectionCountPerClientUsername"] = o.ServiceSmfMaxConnectionCountPerClientUsername
	}
	if !IsNil(o.ServiceWebMaxConnectionCountPerClientUsername) {
		toSerialize["serviceWebMaxConnectionCountPerClientUsername"] = o.ServiceWebMaxConnectionCountPerClientUsername
	}
	if !IsNil(o.MaxEndpointCountPerClientUsername) {
		toSerialize["maxEndpointCountPerClientUsername"] = o.MaxEndpointCountPerClientUsername
	}
	if !IsNil(o.MaxEgressFlowCount) {
		toSerialize["maxEgressFlowCount"] = o.MaxEgressFlowCount
	}
	if !IsNil(o.MaxIngressFlowCount) {
		toSerialize["maxIngressFlowCount"] = o.MaxIngressFlowCount
	}
	if !IsNil(o.MaxSubscriptionCount) {
		toSerialize["maxSubscriptionCount"] = o.MaxSubscriptionCount
	}
	if !IsNil(o.MaxTransactedSessionCount) {
		toSerialize["maxTransactedSessionCount"] = o.MaxTransactedSessionCount
	}
	if !IsNil(o.MaxTransactionCount) {
		toSerialize["maxTransactionCount"] = o.MaxTransactionCount
	}
	if !IsNil(o.QueueGuaranteed1MaxDepth) {
		toSerialize["queueGuaranteed1MaxDepth"] = o.QueueGuaranteed1MaxDepth
	}
	if !IsNil(o.QueueGuaranteed1MinMsgBurst) {
		toSerialize["queueGuaranteed1MinMsgBurst"] = o.QueueGuaranteed1MinMsgBurst
	}
	if !IsNil(o.QueueDirect1MaxDepth) {
		toSerialize["queueDirect1MaxDepth"] = o.QueueDirect1MaxDepth
	}
	if !IsNil(o.QueueDirect1MinMsgBurst) {
		toSerialize["queueDirect1MinMsgBurst"] = o.QueueDirect1MinMsgBurst
	}
	if !IsNil(o.QueueDirect2MaxDepth) {
		toSerialize["queueDirect2MaxDepth"] = o.QueueDirect2MaxDepth
	}
	if !IsNil(o.QueueDirect2MinMsgBurst) {
		toSerialize["queueDirect2MinMsgBurst"] = o.QueueDirect2MinMsgBurst
	}
	if !IsNil(o.QueueDirect3MaxDepth) {
		toSerialize["queueDirect3MaxDepth"] = o.QueueDirect3MaxDepth
	}
	if !IsNil(o.QueueDirect3MinMsgBurst) {
		toSerialize["queueDirect3MinMsgBurst"] = o.QueueDirect3MinMsgBurst
	}
	if !IsNil(o.QueueControl1MaxDepth) {
		toSerialize["queueControl1MaxDepth"] = o.QueueControl1MaxDepth
	}
	if !IsNil(o.QueueControl1MinMsgBurst) {
		toSerialize["queueControl1MinMsgBurst"] = o.QueueControl1MinMsgBurst
	}
	if !IsNil(o.TcpCongestionWindowSize) {
		toSerialize["tcpCongestionWindowSize"] = o.TcpCongestionWindowSize
	}
	if !IsNil(o.TcpKeepaliveCount) {
		toSerialize["tcpKeepaliveCount"] = o.TcpKeepaliveCount
	}
	if !IsNil(o.TcpKeepaliveIdleTime) {
		toSerialize["tcpKeepaliveIdleTime"] = o.TcpKeepaliveIdleTime
	}
	if !IsNil(o.TcpKeepaliveInterval) {
		toSerialize["tcpKeepaliveInterval"] = o.TcpKeepaliveInterval
	}
	if !IsNil(o.TcpMaxSegmentSize) {
		toSerialize["tcpMaxSegmentSize"] = o.TcpMaxSegmentSize
	}
	if !IsNil(o.TcpMaxWindowSize) {
		toSerialize["tcpMaxWindowSize"] = o.TcpMaxWindowSize
	}
	if !IsNil(o.ElidingDelay) {
		toSerialize["elidingDelay"] = o.ElidingDelay
	}
	if !IsNil(o.ElidingEnabled) {
		toSerialize["elidingEnabled"] = o.ElidingEnabled
	}
	if !IsNil(o.ElidingMaxTopicCount) {
		toSerialize["elidingMaxTopicCount"] = o.ElidingMaxTopicCount
	}
	if !IsNil(o.RejectMsgToSenderOnNoSubscriptionMatchEnabled) {
		toSerialize["rejectMsgToSenderOnNoSubscriptionMatchEnabled"] = o.RejectMsgToSenderOnNoSubscriptionMatchEnabled
	}
	if !IsNil(o.TlsAllowDowngradeToPlainTextEnabled) {
		toSerialize["tlsAllowDowngradeToPlainTextEnabled"] = o.TlsAllowDowngradeToPlainTextEnabled
	}
	if !IsNil(o.EventClientProvisionedEndpointSpoolUsageThreshold) {
		toSerialize["eventClientProvisionedEndpointSpoolUsageThreshold"] = o.EventClientProvisionedEndpointSpoolUsageThreshold
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableClientProfileRequest struct {
	value *ClientProfileRequest
	isSet bool
}

func (v NullableClientProfileRequest) Get() *ClientProfileRequest {
	return v.value
}

func (v *NullableClientProfileRequest) Set(val *ClientProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClientProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClientProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientProfileRequest(val *ClientProfileRequest) *NullableClientProfileRequest {
	return &NullableClientProfileRequest{value: val, isSet: true}
}

func (v NullableClientProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


