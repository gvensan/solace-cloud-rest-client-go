/*
MISSION CONTROL

Documentation for Mission Control API

API version: V2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponse{}

// ErrorResponse struct for ErrorResponse
type ErrorResponse struct {
	// A user-friendly message that describes the error.
	Message *string `json:"message,omitempty"`
	// The UUID (Universally Unique Identifier) that is logged with an appropriate stack trace for a WARN or ERROR log that allows support to better determine what cause the error.
	ErrorId *string `json:"errorId,omitempty"`
	Meta map[string]map[string]interface{} `json:"meta,omitempty"`
	// When applicable, these are the details of issues with the fields provided for the REST call.
	ValidationDetails *map[string][]string `json:"validationDetails,omitempty"`
	ErrorType *string `json:"errorType,omitempty"`
}

// NewErrorResponse instantiates a new ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponse() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// NewErrorResponseWithDefaults instantiates a new ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithDefaults() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorResponse) SetMessage(v string) {
	o.Message = &v
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise.
func (o *ErrorResponse) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId) {
		var ret string
		return ret
	}
	return *o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorId) {
		return nil, false
	}
	return o.ErrorId, true
}

// HasErrorId returns a boolean if a field has been set.
func (o *ErrorResponse) HasErrorId() bool {
	if o != nil && !IsNil(o.ErrorId) {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given string and assigns it to the ErrorId field.
func (o *ErrorResponse) SetErrorId(v string) {
	o.ErrorId = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ErrorResponse) GetMeta() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetMetaOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ErrorResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]map[string]interface{} and assigns it to the Meta field.
func (o *ErrorResponse) SetMeta(v map[string]map[string]interface{}) {
	o.Meta = v
}

// GetValidationDetails returns the ValidationDetails field value if set, zero value otherwise.
func (o *ErrorResponse) GetValidationDetails() map[string][]string {
	if o == nil || IsNil(o.ValidationDetails) {
		var ret map[string][]string
		return ret
	}
	return *o.ValidationDetails
}

// GetValidationDetailsOk returns a tuple with the ValidationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetValidationDetailsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.ValidationDetails) {
		return nil, false
	}
	return o.ValidationDetails, true
}

// HasValidationDetails returns a boolean if a field has been set.
func (o *ErrorResponse) HasValidationDetails() bool {
	if o != nil && !IsNil(o.ValidationDetails) {
		return true
	}

	return false
}

// SetValidationDetails gets a reference to the given map[string][]string and assigns it to the ValidationDetails field.
func (o *ErrorResponse) SetValidationDetails(v map[string][]string) {
	o.ValidationDetails = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *ErrorResponse) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType) {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorType) {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *ErrorResponse) HasErrorType() bool {
	if o != nil && !IsNil(o.ErrorType) {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *ErrorResponse) SetErrorType(v string) {
	o.ErrorType = &v
}

func (o ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ErrorId) {
		toSerialize["errorId"] = o.ErrorId
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.ValidationDetails) {
		toSerialize["validationDetails"] = o.ValidationDetails
	}
	if !IsNil(o.ErrorType) {
		toSerialize["errorType"] = o.ErrorType
	}
	return toSerialize, nil
}

type NullableErrorResponse struct {
	value *ErrorResponse
	isSet bool
}

func (v NullableErrorResponse) Get() *ErrorResponse {
	return v.value
}

func (v *NullableErrorResponse) Set(val *ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponse(val *ErrorResponse) *NullableErrorResponse {
	return &NullableErrorResponse{value: val, isSet: true}
}

func (v NullableErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


